public class TicTacToe 
{

	
	char[][] board;
	char whoseMove = 'X';
	int moveRow;
	int moveCol;
	static String ans = "y";
	public TicTacToe() 
	
	{
		board = new char[3][3];			 
		whoseMove = 'X';		 
		initializeBoard();
	}
	public void initializeBoard() 
	{
			
	        // Loop through rows
	    for (int row = 0; row < 3; row++) 
	    	{
			
	        // Loop through columns
	    		for (int col = 0; col < 3; col++) 
	    			{
	    				board[row][col] = ' ';
	    			}
	    	}
	}			
	// Changes whose turn it is
	public void changeTurn()
	{
		if (whoseMove == 'X')
			whoseMove = 'O';
		else
			whoseMove = 'X';
	}
	
	// Print the current board 
    public void printBoard() 
    {
        System.out.println("-------------");
		
        for (int row = 0; row < 3; row++) 
        {
            System.out.print("| ");
            for (int col = 0; col < 3; col++) 
            {
                System.out.print(board[row][col] + " | ");
            }
            System.out.println();
            System.out.println("-------------");
        }
    }
    
    public void playerTurn()
    {
    	
    	printBoard();
    	getMove();
    	setMove();
    	endTurn();
    	changeTurn();
    	
    }
    
	
    public void getMove()
    {
	    	do
	    	{
	    	Scanner keys = new Scanner(System.in);
	    	System.out.println("Player "+ whoseMove + ", your turn.");
	    	System.out.println("Choose row 0, 1, or 2.");
			moveRow = keys.nextInt();
			System.out.println("Choose column 0, 1, or 2.");
			moveCol = keys.nextInt();
			if (validMove() == false)
				System.out.println("That is not a valid move. Please try again.");
	    	}while (validMove() == false);
    }
    
    public boolean validMove()
    {
    	boolean isValid = false;
    	if (board [moveRow][moveCol] == ' ')
    		isValid = true;
    	return isValid;
    }
    
    public void setMove()
    {
    	board [moveRow][moveCol] = whoseMove;
    }
    
    public boolean checkForWin() {
        return (checkRowsForWin() || checkColumnsForWin() || checkDiagonalsForWin());
    }
	
	
    // Loop through rows and see if any are winners.
    private boolean checkRowsForWin() {
        for (int i = 0; i < 3; i++) {
            if (checkRowCol(board[i][0], board[i][1], board[i][2]) == true) {
                return true;
            }
        }
        return false;
    }
	
	
    // Loop through columns and see if any are winners.
    private boolean checkColumnsForWin() {
        for (int i = 0; i < 3; i++) {
            if (checkRowCol(board[0][i], board[1][i], board[2][i]) == true) {
                return true;
            }
        }
        return false;
    }
	
	
    // Check the two diagonals to see if either is a win. Return true if either wins.
    private boolean checkDiagonalsForWin() {
        return ((checkRowCol(board[0][0], board[1][1], board[2][2]) == true) || (checkRowCol(board[0][2], board[1][1], board[2][0]) == true));
    }
	
	
    // Check to see if all three values are the same (and not empty) indicating a win.
    private boolean checkRowCol(char c1, char c2, char c3) {
        return ((c1 != '-') && (c1 == c2) && (c2 == c3));
    }
    
    public void endTurn()
    {
    	Scanner keys = new Scanner(System.in);
    	if (checkForWin() == false  && isBoardFull() == true)
		{
		System.out.println("Tie game. Play again? (y/n): ");
		ans = keys.nextLine(); 
		}
		else if (checkForWin() == true)
		{
			System.out.println("Player " + whoseMove + " wins!");
			System.out.println("Play again? (y/n): ");
			ans = keys.nextLine();
		}
    }
    
    public boolean isBoardFull() {
        boolean isFull = true;
		
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == ' ') {
                    isFull = false;
                }
            }
            
        }
        return isFull;
    }
		
    public static void main(String[] args) 
    {
    	do
    	{	 
    		TicTacToe();
    		initializeBoard();
    		playerTurn();
    	}while (ans == "y");
    }
}